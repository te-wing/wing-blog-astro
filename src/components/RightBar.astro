---
import styles from './rightBar.module.scss';
import { getCollection } from 'astro:content';
import './rightBar.scss';

import SearchForm from './SearchForm.jsx';
import FormBox from './FormBox';

const allPosts = await getCollection('blog');
const uniqueTags = new Set<string>();
const uniqueProjects = new Set<string>();

allPosts.forEach(post => {
  post.data.tags?.forEach(tag => uniqueTags.add(tag));
  post.data.projects?.forEach(project => uniqueProjects.add(project));
});

const sortedTags = Array.from(uniqueTags).sort(); // タグ名をアルファベット順にソート
const sortedProjects = Array.from(uniqueProjects).sort();

const { posts = [] } = Astro.props;
---

<>
  <section class={styles.rightBar}>
    <section class={styles.barSec}>
      <SearchForm client:load />
      <h4>
        <a href="/tags">タグから探す</a>
      </h4>
      {sortedTags.length === 0 ? (
        <p>タグが見つかりませんでした．</p>
      ) : (
        <div class={styles.acontent}>
          <ul>
            {sortedTags.map(tag => (
              <li>
                <a href={`/tags/${tag}`}>#{tag}</a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </section>
    <section>
      <h4>
        <a href="/proj">プロジェクト</a>
      </h4>
      {sortedProjects.length === 0 ? (
        <p>プロジェクトが見つかりませんでした．</p>
      ) : (
        <div>
          <ul>
            {sortedProjects.map(project => (
              <li>
                <a href=`/proj/${project}`>{project}</a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </section>
    <section class={styles.barSec}>
      <h4>
        <a href="/posts">最新記事</a>
      </h4>
      <div>
        <ul>
          {posts.slice(0, 5).map(post => (
            <li class={styles.item}>
              <a href={`/posts/${post.slug}`} class={styles.link}>
                {post.data.title}
              </a>
            </li>
          ))}
          <li>
            <a href='/posts'>もっと見る...</a>
          </li>
        </ul>
      </div>
    </section>
    <section class={styles.barSec}>
      <FormBox />
    </section>
  </section>
</>

<script>
  // フォームにイベントリスナーを追加し、Turnstileを初期化する処理を関数にまとめる
  function initializeForm() {
    const form = document.getElementById('survey-form');
    const workerUrl = 'https://form-workers.wing.osaka';

    if (form) {
      // 既存のイベントリスナーがあれば削除
      form.removeEventListener('submit', handleFormSubmit);
      // 新しいイベントリスナーを追加
      form.addEventListener('submit', handleFormSubmit);

      // Turnstileウィジェットを再レンダリングする
      // ウィジェットのコンテナ要素を取得
      const turnstileContainer = form.querySelector('.cf-turnstile');
      if (turnstileContainer && window.turnstile) {
        // 既存のウィジェットをリセットまたは破棄してから新しいウィジェットをレンダリング
        turnstile.render(turnstileContainer, {
          sitekey: '0x4AAAAAABpyNGg6V96WphRE',
        });
      }
    }

    async function handleFormSubmit(event) {
      event.preventDefault(); // デフォルトのフォーム送信を停止

      const formData = new FormData(form);
      
      try {
        const response = await fetch(workerUrl, {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (response.ok) {
          alert('アンケートの送信に成功しました！');
          form.reset(); // フォームをリセット
          // フォーム送信成功後、Turnstileウィジェットもリセットする
          if (window.turnstile) {
            turnstile.reset();
          }
        } else {
          alert('エラー：' + (result.error || '不明なエラー'));
          // エラー時もTurnstileウィジェットをリセット
          if (window.turnstile) {
            turnstile.reset();
          }
        }
      } catch (error) {
        console.error('通信エラー：', error);
        alert('通信中にエラーが発生しました。');
        // 通信エラー時もTurnstileウィジェットをリセット
        if (window.turnstile) {
          turnstile.reset();
        }
      }
    }
  }

  // 最初のページロード時とページ遷移後にフォームとTurnstileを初期化
  document.addEventListener('DOMContentLoaded', initializeForm);
  document.addEventListener('astro:after-swap', initializeForm);
</script>
