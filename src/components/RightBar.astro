---
import styles from './rightBar.module.scss';
import { getCollection } from 'astro:content';
import './rightBar.scss';

const allPosts = await getCollection('blog');
const uniqueTags = new Set<string>();
const uniqueProjects = new Set<string>();

allPosts.forEach(post => {
  post.data.tags?.forEach(tag => uniqueTags.add(tag));
  post.data.projects?.forEach(project => uniqueProjects.add(project));
});

const sortedTags = Array.from(uniqueTags).sort(); // タグ名をアルファベット順にソート
const sortedProjects = Array.from(uniqueProjects).sort();

const { posts = [] } = Astro.props;
---

<>
  <section class={styles.rightBar}>
    <section class={styles.barSec}>
      <h4>
        <a href="/tags">タグから探す</a>
      </h4>
      {sortedTags.length === 0 ? (
        <p>タグが見つかりませんでした．</p>
      ) : (
        <div class={styles.acontent}>
          <ul>
            {sortedTags.map(tag => (
              <li>
                <a href={`/tags/${tag}`}>#{tag}</a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </section>
    <section>
      <h4>
        <a href="/proj">プロジェクト</a>
      </h4>
      {sortedProjects.length === 0 ? (
        <p>プロジェクトが見つかりませんでした．</p>
      ) : (
        <div>
          <ul>
            {sortedProjects.map(project => (
              <li>
                <a href=`/proj/${project}`>{project}</a>
              </li>
            ))}
          </ul>
        </div>
      )}
    </section>
    <section class={styles.barSec}>
      <h4>
        <a href="/posts">最新記事</a>
      </h4>
      <div>
        <ul>
          {posts.slice(0, 5).map(post => (
            <li class={styles.item}>
              <a href={`/posts/${post.slug}`} class={styles.link}>
                {post.data.title}
              </a>
            </li>
          ))}
          <li>
            <a href='/posts'>もっと見る...</a>
          </li>
        </ul>
      </div>
    </section>
    <section class={styles.barSec}>
      <h4>アンケート</h4>
      <form id="survey-form">
        <label for="username">ニックネーム（任意）：</label>
        <input type="text" id="username" name="username"><br /><br />

        <label for="email">メールアドレス（任意）：</label>
        <input type="email" id="email" name="email"><br /><br />

        <label for="rate">サイト評価（必須）：</label>
        <select id="rate" name="rate" required>
          <option value="">選択してください</option>
          <option value="5">5 - とても良い</option>
          <option value="4">4 - 良い</option>
          <option value="3">3 - 普通</option>
          <option value="2">2 - 悪い</option>
          <option value="1">1 - とても悪い</option>
        </select>
        <br /><br />

        <label for="comment">ご意見・ご感想（任意）：</label>
        <textarea id="comment" name="comment"></textarea><br/><br/>

        <div class="cf-turnstile" data-sitekey="0x4AAAAAABpyNGg6V96WphRE"></div>

        <input type="hidden" name="host" value={Astro.url.host} />

        <button type="submit">送信</button>
      </form>
    </section>
  </section>
</>

<script>
  // フォームにイベントリスナーを追加する処理を関数にまとめる
  function initializeForm() {
    const form = document.getElementById('survey-form');
    const workerUrl = 'https://form-workers.wing.osaka';

    // 既存のイベントリスナーを削除する（重複登録を防ぐため）
    if (form) {
      // 既存のイベントリスナーがあれば削除
      form.removeEventListener('submit', handleFormSubmit);
      // 新しいイベントリスナーを追加
      form.addEventListener('submit', handleFormSubmit);
    }

    async function handleFormSubmit(event) {
      event.preventDefault(); // デフォルトのフォーム送信を停止

      const formData = new FormData(form);
      
      try {
        const response = await fetch(workerUrl, {
          method: 'POST',
          body: formData,
        });

        const result = await response.json();

        if (response.ok) {
          alert('アンケートの送信に成功しました！');
          form.reset(); // フォームをリセット
        } else {
          alert('エラー：' + (result.error || '不明なエラー'));
        }
      } catch (error) {
        console.error('通信エラー：', error);
        alert('通信中にエラーが発生しました。');
      }
    }
  }

  // 最初のページロード時とページ遷移後にフォームを初期化
  document.addEventListener('DOMContentLoaded', initializeForm);
  document.addEventListener('astro:after-swap', initializeForm);
</script>
